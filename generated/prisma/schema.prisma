generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  token     String   @db.Text
  tokenHash String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Team {
  id         String   @id @default(uuid())
  name       String
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User[]
}

model User {
  id              String   @id @default(uuid())
  team            Team     @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id         String   @map("team_id") @db.VarChar(36)
  name            String
  email           String   @unique
  password        String
  profile_picture String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  rent    Rent[]
  product Product[]
  cart    Cart?

  @@index([team_id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Rent {
  id                     String  @id @default(uuid())
  user                   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id                String  @map("user_id") @db.VarChar(36)
  identification         String
  phone                  String
  notes                  String? @db.Text
  identification_picture String
  documentation_before   String?
  documentation_after    String?

  order Order?

  @@index([user_id])
}

model Order {
  id             String        @id @default(uuid())
  rent           Rent          @relation(fields: [rent_id], references: [id], onDelete: Cascade)
  rent_id        String        @unique @map("rent_id") @db.VarChar(36)
  invoice        String
  order_date     DateTime      @default(now())
  start_date     DateTime
  end_date       DateTime
  total_cost     Float
  order_status   OrderStatus   @default(PENDING)
  payment_status PaymentStatus @default(PENDING)

  products OrderOnProduct[]

  @@index([rent_id])
}

model Product {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String   @map("user_id") @db.VarChar(36)
  category        Category @relation(fields: [category_id], references: [id])
  category_id     String   @map("category_id") @db.VarChar(36)
  name            String
  slug            String
  price           Float
  quantity        Int
  quantity_alert  Int
  brand           String
  description     String   @db.Text
  specifications  String   @db.Text
  source          String
  date_arrival    DateTime
  is_rentable     Boolean
  product_picture String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  order OrderOnProduct[]
  cart  CartOnItem[]

  @@unique([slug])
  @@index([user_id])
  @@index([category_id])
}

model OrderOnProduct {
  id         String  @id @default(uuid())
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id   String  @map("order_id") @db.VarChar(36)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String  @map("product_id") @db.VarChar(36)
  quantity   Int
  price      Float

  @@index([order_id])
  @@index([product_id])
}

model Category {
  id         String   @id @default(uuid())
  name       String
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product[]
}

model Cart {
  id      String @id @default(uuid())
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique @map("user_id") @db.VarChar(36)

  cart_items CartOnItem[]

  @@index([user_id])
}

model CartOnItem {
  id         String  @id @default(uuid())
  cart       Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  cart_id    String  @map("cart_id") @db.VarChar(36)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String  @map("product_id") @db.VarChar(36)
  quantity   Int

  @@unique([cart_id, product_id])
  @@index([cart_id])
  @@index([product_id])
}
